<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceyagit_1_1core_1_1math_1_1vectorized" kind="namespace" language="C++">
    <compoundname>yagit::core::math::vectorized</compoundname>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1params__vec" prot="public">yagit::core::math::vectorized::params_vec</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1params__vec_3_01gamma__index__params_3_01_type_01_4_00_01_vector_size_01_4" prot="public">yagit::core::math::vectorized::params_vec&lt; gamma_index_params&lt; Type &gt;, VectorSize &gt;</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1params__vec_3_01global__gamma__index__params_3_01_type_01_4_00_01_vector_size_01_4" prot="public">yagit::core::math::vectorized::params_vec&lt; global_gamma_index_params&lt; Type &gt;, VectorSize &gt;</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1params__vec_3_01local__gamma__index__params_3_01_type_01_4_00_01_vector_size_01_4" prot="public">yagit::core::math::vectorized::params_vec&lt; local_gamma_index_params&lt; Type &gt;, VectorSize &gt;</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1vec" prot="public">yagit::core::math::vectorized::vec</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1vec_3_01double_00_01_vector_size_01_4" prot="public">yagit::core::math::vectorized::vec&lt; double, VectorSize &gt;</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1vec_3_01float_00_01_vector_size_01_4" prot="public">yagit::core::math::vectorized::vec&lt; float, VectorSize &gt;</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1vgamma__index__params" prot="public">yagit::core::math::vectorized::vgamma_index_params</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1vgamma__index__params_3_01double_00_01_vector_size_01_4" prot="public">yagit::core::math::vectorized::vgamma_index_params&lt; double, VectorSize &gt;</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1vgamma__index__params_3_01float_00_01_vector_size_01_4" prot="public">yagit::core::math::vectorized::vgamma_index_params&lt; float, VectorSize &gt;</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1vglobal__gamma__index__params" prot="public">yagit::core::math::vectorized::vglobal_gamma_index_params</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1vglobal__gamma__index__params_3_01double_00_01_vector_size_01_4" prot="public">yagit::core::math::vectorized::vglobal_gamma_index_params&lt; double, VectorSize &gt;</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1vglobal__gamma__index__params_3_01float_00_01_vector_size_01_4" prot="public">yagit::core::math::vectorized::vglobal_gamma_index_params&lt; float, VectorSize &gt;</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1vlocal__gamma__index__params" prot="public">yagit::core::math::vectorized::vlocal_gamma_index_params</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1vlocal__gamma__index__params_3_01double_00_01_vector_size_01_4" prot="public">yagit::core::math::vectorized::vlocal_gamma_index_params&lt; double, VectorSize &gt;</innerclass>
    <innerclass refid="structyagit_1_1core_1_1math_1_1vectorized_1_1vlocal__gamma__index__params_3_01float_00_01_vector_size_01_4" prot="public">yagit::core::math::vectorized::vlocal_gamma_index_params&lt; float, VectorSize &gt;</innerclass>
    <innernamespace refid="namespaceyagit_1_1core_1_1math_1_1vectorized_1_1detail">yagit::core::math::vectorized::detail</innernamespace>
    <innernamespace refid="namespaceyagit_1_1core_1_1math_1_1vectorized_1_1openmp">yagit::core::math::vectorized::openmp</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="math_2vectorized_2common_8hpp_1af259fb54e6b5f6d60220864a2f57b628" prot="public" static="no">
        <type>typename vec&lt; Type, VectorSize &gt;::type</type>
        <definition>using yagit::core::math::vectorized::vec_t = typedef typename vec&lt;Type, VectorSize&gt;::type</definition>
        <argsstring></argsstring>
        <name>vec_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/common.hpp" line="128" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/common.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="math_2vectorized_2common_8hpp_1a287f1242398e6f0165bb212e94f89b00" prot="public" static="no">
        <type>typename params_vec&lt; ParamsType, VectorSize &gt;::type</type>
        <definition>using yagit::core::math::vectorized::params_vec_t = typedef typename params_vec&lt;ParamsType, VectorSize&gt;::type</definition>
        <argsstring></argsstring>
        <name>params_vec_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/common.hpp" line="143" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/common.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="math_2vectorized_2common_8hpp_1aefece926d12252b35eacea0cf10ab7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>Alignment</declname>
            <defname>Alignment</defname>
          </param>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto yagit::core::math::vectorized::load</definition>
        <argsstring>(const Type *p)</argsstring>
        <name>load</name>
        <param>
          <type>const Type *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/common.hpp" line="146" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/common.hpp" bodystart="146" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="math_2vectorized_2common_8hpp_1a344aeec4ddf8a51917163649f7ea466f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>Alignment</declname>
            <defname>Alignment</defname>
          </param>
          <param>
            <type>unsigned</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void yagit::core::math::vectorized::store</definition>
        <argsstring>(Type *p, const simdpp::any_vec&lt; N, E &gt; &amp;v)</argsstring>
        <name>store</name>
        <param>
          <type>Type *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const simdpp::any_vec&lt; N, E &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/common.hpp" line="155" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/common.hpp" bodystart="155" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="math_2vectorized_2common_8hpp_1ab41d7d85f6d88627815ee36a2315ca50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float yagit::core::math::vectorized::find_if</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize &gt; &amp;v, F f)</argsstring>
        <name>find_if</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/common.hpp" line="200" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/common.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="math_2vectorized_2common_8hpp_1a62c8680505794a4585a9c83e1781ec83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double yagit::core::math::vectorized::find_if</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize &gt; &amp;v, F f)</argsstring>
        <name>find_if</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/common.hpp" line="206" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/common.hpp" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a803fb8e4e4a515cb9fca9e5827caccfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::dose_difference</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;target_dose, const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>dose_difference</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="10" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="10" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a177ece3e8c7ca6a00214477bbe18e3f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::dose_difference</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;target_dose, const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>dose_difference</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="19" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1afd67c6ff365371e6456e157fe0ebabdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::dose_difference</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;target_dose, const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>dose_difference</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="30" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="30" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a33245654fac5f5f2966dfc985bb10a0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::dose_difference</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;target_dose, const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>dose_difference</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="39" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a0cc175b22822d844701a8c96f3327f5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::distance_to_agreement</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_x, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;target_x, const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>distance_to_agreement</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="50" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="50" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1ae7fcf93edd77ecde1ebec79f598feff4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::distance_to_agreement</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_x, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;reference_y, const simdpp::float32&lt; VectorSize, E2 &gt; &amp;target_x, const simdpp::float32&lt; VectorSize, E3 &gt; &amp;target_y, const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>distance_to_agreement</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="60" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="60" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a2902ff1b9deea8b5e55afbb0732c8ff8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
          <param>
            <type>typename E4</type>
          </param>
          <param>
            <type>typename E5</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::distance_to_agreement</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_x, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;reference_y, const simdpp::float32&lt; VectorSize, E2 &gt; &amp;reference_z, const simdpp::float32&lt; VectorSize, E3 &gt; &amp;target_x, const simdpp::float32&lt; VectorSize, E4 &gt; &amp;target_y, const simdpp::float32&lt; VectorSize, E5 &gt; &amp;target_z, const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>distance_to_agreement</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_z</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E4 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E5 &gt; &amp;</type>
          <declname>target_z</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="71" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="71" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a92ca293f163c8328f8cb3ab83536ae8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::distance_to_agreement</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_x, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;target_x, const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>distance_to_agreement</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="83" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1ab9cc51be5c9369fd77d7e7c6c8dd9536" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::distance_to_agreement</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_x, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;reference_y, const simdpp::float32&lt; VectorSize, E2 &gt; &amp;target_x, const simdpp::float32&lt; VectorSize, E3 &gt; &amp;target_y, const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>distance_to_agreement</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="93" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="93" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a456e42ff6aaa0efe14338bbc302c7ab4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
          <param>
            <type>typename E4</type>
          </param>
          <param>
            <type>typename E5</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::distance_to_agreement</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_x, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;reference_y, const simdpp::float32&lt; VectorSize, E2 &gt; &amp;reference_z, const simdpp::float32&lt; VectorSize, E3 &gt; &amp;target_x, const simdpp::float32&lt; VectorSize, E4 &gt; &amp;target_y, const simdpp::float32&lt; VectorSize, E5 &gt; &amp;target_z, const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>distance_to_agreement</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_z</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E4 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E5 &gt; &amp;</type>
          <declname>target_z</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="104" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="104" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a4965f35f181935cf7831e3ee12714351" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::distance_to_agreement</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_x, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;target_x, const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>distance_to_agreement</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="118" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="118" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a6b4f8d924b3329e2af57b526c4d0380c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::distance_to_agreement</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_x, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;reference_y, const simdpp::float64&lt; VectorSize, E2 &gt; &amp;target_x, const simdpp::float64&lt; VectorSize, E3 &gt; &amp;target_y, const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>distance_to_agreement</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="128" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="128" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a782fcd20440a5a539be645830b7289cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
          <param>
            <type>typename E4</type>
          </param>
          <param>
            <type>typename E5</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::distance_to_agreement</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_x, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;reference_y, const simdpp::float64&lt; VectorSize, E2 &gt; &amp;reference_z, const simdpp::float64&lt; VectorSize, E3 &gt; &amp;target_x, const simdpp::float64&lt; VectorSize, E4 &gt; &amp;target_y, const simdpp::float64&lt; VectorSize, E5 &gt; &amp;target_z, const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>distance_to_agreement</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_z</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E4 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E5 &gt; &amp;</type>
          <declname>target_z</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="139" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="139" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a987bc0cb01285ae4f9d8ed92aaad5ea9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::distance_to_agreement</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_x, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;target_x, const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>distance_to_agreement</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="151" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="151" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a1f9914190e370a0bba86e8d0f99e64ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::distance_to_agreement</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_x, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;reference_y, const simdpp::float64&lt; VectorSize, E2 &gt; &amp;target_x, const simdpp::float64&lt; VectorSize, E3 &gt; &amp;target_y, const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>distance_to_agreement</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="161" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="161" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1ac40fe16ac926f1c20d21e2cce8392e55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
          <param>
            <type>typename E4</type>
          </param>
          <param>
            <type>typename E5</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::distance_to_agreement</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_x, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;reference_y, const simdpp::float64&lt; VectorSize, E2 &gt; &amp;reference_z, const simdpp::float64&lt; VectorSize, E3 &gt; &amp;target_x, const simdpp::float64&lt; VectorSize, E4 &gt; &amp;target_y, const simdpp::float64&lt; VectorSize, E5 &gt; &amp;target_z, const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>distance_to_agreement</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_z</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E4 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E5 &gt; &amp;</type>
          <declname>target_z</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="172" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="172" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a7bc6cf5e1348044e6d1465ec9a254a2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::gamma_index</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;target_dose, const simdpp::float32&lt; VectorSize, E2 &gt; &amp;reference_x, const simdpp::float32&lt; VectorSize, E3 &gt; &amp;target_x, const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>gamma_index</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="186" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="186" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1aa700c2c263d27eef2a10df825763359d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
          <param>
            <type>typename E4</type>
          </param>
          <param>
            <type>typename E5</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::gamma_index</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;target_dose, const simdpp::float32&lt; VectorSize, E2 &gt; &amp;reference_x, const simdpp::float32&lt; VectorSize, E3 &gt; &amp;reference_y, const simdpp::float32&lt; VectorSize, E4 &gt; &amp;target_x, const simdpp::float32&lt; VectorSize, E5 &gt; &amp;target_y, const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>gamma_index</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E4 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E5 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="197" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="197" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a055d0543c79de406e8cf84c06631e8c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
          <param>
            <type>typename E4</type>
          </param>
          <param>
            <type>typename E5</type>
          </param>
          <param>
            <type>typename E6</type>
          </param>
          <param>
            <type>typename E7</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::gamma_index</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;target_dose, const simdpp::float32&lt; VectorSize, E2 &gt; &amp;reference_x, const simdpp::float32&lt; VectorSize, E3 &gt; &amp;reference_y, const simdpp::float32&lt; VectorSize, E4 &gt; &amp;reference_z, const simdpp::float32&lt; VectorSize, E5 &gt; &amp;target_x, const simdpp::float32&lt; VectorSize, E6 &gt; &amp;target_y, const simdpp::float32&lt; VectorSize, E7 &gt; &amp;target_z, const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>gamma_index</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E4 &gt; &amp;</type>
          <declname>reference_z</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E5 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E6 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E7 &gt; &amp;</type>
          <declname>target_z</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="208" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="208" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1ad08bf821f54f0bb16f7656e18da4c86f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::gamma_index</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;target_dose, const simdpp::float32&lt; VectorSize, E2 &gt; &amp;reference_x, const simdpp::float32&lt; VectorSize, E3 &gt; &amp;target_x, const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>gamma_index</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="219" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="219" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1af897ed59b4e07a66b109c230bd64f458" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
          <param>
            <type>typename E4</type>
          </param>
          <param>
            <type>typename E5</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::gamma_index</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;target_dose, const simdpp::float32&lt; VectorSize, E2 &gt; &amp;reference_x, const simdpp::float32&lt; VectorSize, E3 &gt; &amp;reference_y, const simdpp::float32&lt; VectorSize, E4 &gt; &amp;target_x, const simdpp::float32&lt; VectorSize, E5 &gt; &amp;target_y, const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>gamma_index</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E4 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E5 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="230" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="230" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a8f89c054c555712c329227b57a3f07c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
          <param>
            <type>typename E4</type>
          </param>
          <param>
            <type>typename E5</type>
          </param>
          <param>
            <type>typename E6</type>
          </param>
          <param>
            <type>typename E7</type>
          </param>
        </templateparamlist>
        <type>simdpp::float32&lt; VectorSize &gt;</type>
        <definition>simdpp::float32&lt;VectorSize&gt; yagit::core::math::vectorized::gamma_index</definition>
        <argsstring>(const simdpp::float32&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float32&lt; VectorSize, E1 &gt; &amp;target_dose, const simdpp::float32&lt; VectorSize, E2 &gt; &amp;reference_x, const simdpp::float32&lt; VectorSize, E3 &gt; &amp;reference_y, const simdpp::float32&lt; VectorSize, E4 &gt; &amp;reference_z, const simdpp::float32&lt; VectorSize, E5 &gt; &amp;target_x, const simdpp::float32&lt; VectorSize, E6 &gt; &amp;target_y, const simdpp::float32&lt; VectorSize, E7 &gt; &amp;target_z, const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;params)</argsstring>
        <name>gamma_index</name>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E4 &gt; &amp;</type>
          <declname>reference_z</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E5 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E6 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const simdpp::float32&lt; VectorSize, E7 &gt; &amp;</type>
          <declname>target_z</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; float, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="241" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="241" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a014f53caa9d20877ba15f4bcbfbad5dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::gamma_index</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;target_dose, const simdpp::float64&lt; VectorSize, E2 &gt; &amp;reference_x, const simdpp::float64&lt; VectorSize, E3 &gt; &amp;target_x, const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>gamma_index</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="254" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="254" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1ae9e97433d80c181efd248f2c403af37e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
          <param>
            <type>typename E4</type>
          </param>
          <param>
            <type>typename E5</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::gamma_index</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;target_dose, const simdpp::float64&lt; VectorSize, E2 &gt; &amp;reference_x, const simdpp::float64&lt; VectorSize, E3 &gt; &amp;reference_y, const simdpp::float64&lt; VectorSize, E4 &gt; &amp;target_x, const simdpp::float64&lt; VectorSize, E5 &gt; &amp;target_y, const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>gamma_index</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E4 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E5 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="265" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="265" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a6a4caaa7d5d0e3d042b305f0553f0d14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
          <param>
            <type>typename E4</type>
          </param>
          <param>
            <type>typename E5</type>
          </param>
          <param>
            <type>typename E6</type>
          </param>
          <param>
            <type>typename E7</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::gamma_index</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;target_dose, const simdpp::float64&lt; VectorSize, E2 &gt; &amp;reference_x, const simdpp::float64&lt; VectorSize, E3 &gt; &amp;reference_y, const simdpp::float64&lt; VectorSize, E4 &gt; &amp;reference_z, const simdpp::float64&lt; VectorSize, E5 &gt; &amp;target_x, const simdpp::float64&lt; VectorSize, E6 &gt; &amp;target_y, const simdpp::float64&lt; VectorSize, E7 &gt; &amp;target_z, const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>gamma_index</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E4 &gt; &amp;</type>
          <declname>reference_z</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E5 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E6 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E7 &gt; &amp;</type>
          <declname>target_z</declname>
        </param>
        <param>
          <type>const vlocal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="276" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="276" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a25571dbb9c9baab0ec46b85e4dd7f407" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::gamma_index</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;target_dose, const simdpp::float64&lt; VectorSize, E2 &gt; &amp;reference_x, const simdpp::float64&lt; VectorSize, E3 &gt; &amp;target_x, const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>gamma_index</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="287" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="287" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a50885341222454208ef3781a3a09aaf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
          <param>
            <type>typename E4</type>
          </param>
          <param>
            <type>typename E5</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::gamma_index</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;target_dose, const simdpp::float64&lt; VectorSize, E2 &gt; &amp;reference_x, const simdpp::float64&lt; VectorSize, E3 &gt; &amp;reference_y, const simdpp::float64&lt; VectorSize, E4 &gt; &amp;target_x, const simdpp::float64&lt; VectorSize, E5 &gt; &amp;target_y, const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>gamma_index</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E4 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E5 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="298" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="298" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="vectorized_2gamma__index__single_8hpp_1a1287a07945da4760f70e4c0089359b22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned</type>
            <declname>VectorSize</declname>
            <defname>VectorSize</defname>
          </param>
          <param>
            <type>typename E0</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
          <param>
            <type>typename E3</type>
          </param>
          <param>
            <type>typename E4</type>
          </param>
          <param>
            <type>typename E5</type>
          </param>
          <param>
            <type>typename E6</type>
          </param>
          <param>
            <type>typename E7</type>
          </param>
        </templateparamlist>
        <type>simdpp::float64&lt; VectorSize &gt;</type>
        <definition>simdpp::float64&lt;VectorSize&gt; yagit::core::math::vectorized::gamma_index</definition>
        <argsstring>(const simdpp::float64&lt; VectorSize, E0 &gt; &amp;reference_dose, const simdpp::float64&lt; VectorSize, E1 &gt; &amp;target_dose, const simdpp::float64&lt; VectorSize, E2 &gt; &amp;reference_x, const simdpp::float64&lt; VectorSize, E3 &gt; &amp;reference_y, const simdpp::float64&lt; VectorSize, E4 &gt; &amp;reference_z, const simdpp::float64&lt; VectorSize, E5 &gt; &amp;target_x, const simdpp::float64&lt; VectorSize, E6 &gt; &amp;target_y, const simdpp::float64&lt; VectorSize, E7 &gt; &amp;target_z, const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;params)</argsstring>
        <name>gamma_index</name>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E0 &gt; &amp;</type>
          <declname>reference_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E1 &gt; &amp;</type>
          <declname>target_dose</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E2 &gt; &amp;</type>
          <declname>reference_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E3 &gt; &amp;</type>
          <declname>reference_y</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E4 &gt; &amp;</type>
          <declname>reference_z</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E5 &gt; &amp;</type>
          <declname>target_x</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E6 &gt; &amp;</type>
          <declname>target_y</declname>
        </param>
        <param>
          <type>const simdpp::float64&lt; VectorSize, E7 &gt; &amp;</type>
          <declname>target_z</declname>
        </param>
        <param>
          <type>const vglobal_gamma_index_params&lt; double, VectorSize &gt; &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" line="309" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/math/vectorized/gamma_index_single.hpp" bodystart="309" bodyend="317"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="[generated]" line="1" column="1"/>
  </compounddef>
</doxygen>
