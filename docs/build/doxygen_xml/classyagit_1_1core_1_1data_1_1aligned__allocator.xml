<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classyagit_1_1core_1_1data_1_1aligned__allocator" kind="class" language="C++" prot="public">
    <compoundname>yagit::core::data::aligned_allocator</compoundname>
    <basecompoundref prot="protected" virt="non-virtual">std::allocator&lt; detail::aligned_block&lt; Type, ElementMultiple &gt; &gt;</basecompoundref>
    <includes local="no">aligned_allocator.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Type</type>
      </param>
      <param>
        <type>size_t</type>
        <declname>ElementMultiple</declname>
        <defname>ElementMultiple</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1a76c1fd1661f08a62a556e1c40de1f926" prot="private" static="no">
        <type>std::allocator&lt; detail::aligned_block&lt; Type, ElementMultiple &gt; &gt;</type>
        <definition>using yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::base =  std::allocator&lt;detail::aligned_block&lt;Type, ElementMultiple&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="28" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1afc928efd67a18b3887bf6890a3c5ab6a" prot="public" static="no">
        <type>Type</type>
        <definition>using yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::value_type =  Type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="30" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1af92caa80c9bc17195d565f246f7a3527" prot="public" static="no">
        <type>typename base::size_type</type>
        <definition>using yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::size_type =  typename base::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="31" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1a179276058791fd56137cf3fc5c5bf985" prot="public" static="no">
        <type>typename base::difference_type</type>
        <definition>using yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::difference_type =  typename base::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="32" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1a77ee01ced31e82ac5d0d57741daea3d0" prot="public" static="no">
        <type>typename base::propagate_on_container_move_assignment</type>
        <definition>using yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::propagate_on_container_move_assignment =  typename base::propagate_on_container_move_assignment</definition>
        <argsstring></argsstring>
        <name>propagate_on_container_move_assignment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="33" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1a18b92f054ebffa64dfe7051fd1796171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::aligned_allocator</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>aligned_allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1a12da90b2a76c73b40e262a93b0b187a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::aligned_allocator</definition>
        <argsstring>(const aligned_allocator &amp;other) noexcept=default</argsstring>
        <name>aligned_allocator</name>
        <param>
          <type>const <ref refid="classyagit_1_1core_1_1data_1_1aligned__allocator" kindref="compound">aligned_allocator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1ab0f1bc75849ee6647e57e903a4d5b588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::aligned_allocator</definition>
        <argsstring>(aligned_allocator &amp;&amp;other) noexcept=default</argsstring>
        <name>aligned_allocator</name>
        <param>
          <type><ref refid="classyagit_1_1core_1_1data_1_1aligned__allocator" kindref="compound">aligned_allocator</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1ab6e8d60e8ba543131d639ff9791317f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="classyagit_1_1core_1_1data_1_1aligned__allocator" kindref="compound">aligned_allocator</ref> &amp;</type>
        <definition>constexpr aligned_allocator&amp; yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::operator=</definition>
        <argsstring>(const aligned_allocator &amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classyagit_1_1core_1_1data_1_1aligned__allocator" kindref="compound">aligned_allocator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1ae5203f710c527b071276fc56db57dd41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="classyagit_1_1core_1_1data_1_1aligned__allocator" kindref="compound">aligned_allocator</ref> &amp;</type>
        <definition>constexpr aligned_allocator&amp; yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::operator=</definition>
        <argsstring>(aligned_allocator &amp;&amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classyagit_1_1core_1_1data_1_1aligned__allocator" kindref="compound">aligned_allocator</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1a9c8f6e19c196b0551c4c4380b48f8e67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::~aligned_allocator</definition>
        <argsstring>()=default</argsstring>
        <name>~aligned_allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1abe3b9b48d152dcad9ca6ebe6d58a2d08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>value_type *</type>
        <definition>value_type* yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::allocate</definition>
        <argsstring>(size_type n)</argsstring>
        <name>allocate</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="49" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1abe0df241926350ddf893e6cc22c92d22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>allocation_result&lt; value_type * &gt;</type>
        <definition>allocation_result&lt;value_type*&gt; yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::allocate_at_least</definition>
        <argsstring>(size_type n)</argsstring>
        <name>allocate_at_least</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="53" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1ac9ebd76981cac0d1349298213cae3c22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::deallocate</definition>
        <argsstring>(value_type *p, size_type n)</argsstring>
        <name>deallocate</name>
        <param>
          <type>value_type *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="58" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1a2b286788bc72c45e762325e7c6e4c8c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::operator==</definition>
        <argsstring>(const aligned_allocator &amp;other)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classyagit_1_1core_1_1data_1_1aligned__allocator" kindref="compound">aligned_allocator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="63" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1a577ef8dc1675b244ff8d9cd4c1036a17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::operator!=</definition>
        <argsstring>(const aligned_allocator &amp;other)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classyagit_1_1core_1_1data_1_1aligned__allocator" kindref="compound">aligned_allocator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="67" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" bodystart="67" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classyagit_1_1core_1_1data_1_1aligned__allocator_1a6fa9df0122c123300a74e4f61a0b5d74" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr size_type</type>
        <definition>constexpr size_type yagit::core::data::aligned_allocator&lt; Type, ElementMultiple &gt;::blocks_count</definition>
        <argsstring>(size_type n)</argsstring>
        <name>blocks_count</name>
        <param>
          <type>size_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="44" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" bodystart="44" bodyend="47"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allocator providing a mean to allocate aligned memory to a boundary defined by alignment requirement of the underyling type multiplied by desired multiple of the element alignment requirement (must be a power of 2) </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Underlying type</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ElementMultiple</parametername>
</parameternamelist>
<parameterdescription>
<para>Multiplicity of element alignment requirement (must be a power of 2)</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" line="26" column="1" bodyfile="/__w/gi-yagit/gi-yagit/gi_core/include/data/allocation/aligned_allocator.hpp" bodystart="24" bodyend="75"/>
    <listofallmembers>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1a18b92f054ebffa64dfe7051fd1796171" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>aligned_allocator</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1a12da90b2a76c73b40e262a93b0b187a4" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>aligned_allocator</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1ab0f1bc75849ee6647e57e903a4d5b588" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>aligned_allocator</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1abe3b9b48d152dcad9ca6ebe6d58a2d08" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>allocate</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1abe0df241926350ddf893e6cc22c92d22" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>allocate_at_least</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1a76c1fd1661f08a62a556e1c40de1f926" prot="private" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>base</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1a6fa9df0122c123300a74e4f61a0b5d74" prot="private" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>blocks_count</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1ac9ebd76981cac0d1349298213cae3c22" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>deallocate</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1a179276058791fd56137cf3fc5c5bf985" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>difference_type</name></member>
      <member refid="classstd_1_1allocator_1a55f88dab1194d6b8a34e46017c4dfd79" prot="protected" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>elements</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1a577ef8dc1675b244ff8d9cd4c1036a17" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>operator!=</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1ab6e8d60e8ba543131d639ff9791317f7" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>operator=</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1ae5203f710c527b071276fc56db57dd41" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>operator=</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1a2b286788bc72c45e762325e7c6e4c8c3" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>operator==</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1a77ee01ced31e82ac5d0d57741daea3d0" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>propagate_on_container_move_assignment</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1af92caa80c9bc17195d565f246f7a3527" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>size_type</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1afc928efd67a18b3887bf6890a3c5ab6a" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>value_type</name></member>
      <member refid="classyagit_1_1core_1_1data_1_1aligned__allocator_1a9c8f6e19c196b0551c4c4380b48f8e67" prot="public" virt="non-virtual"><scope>yagit::core::data::aligned_allocator</scope><name>~aligned_allocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
